/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserViews;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Bill;
import model.Product;
import repository.BillRepositoryImpl;
import repository.ProductRepositoryImpl;

/**
 *
 * @author aoshi
 */
public class OrderView extends javax.swing.JPanel {
    private ProductRepositoryImpl productRepositoryImpl;
    private BillRepositoryImpl billRepositoryImpl;
    private List<Product> listProduct = new ArrayList<Product>();
    private Map<Product, Integer> productQuantityMap = new HashMap<>();
    /**
     * Creates new form OrderView
     */
    public OrderView() {
        initComponents();
        initSetUp();
        DefaultTableModel model = (DefaultTableModel) productChosenTable.getModel();
        model.setRowCount(0);
    }
    
    public void initSetUp() {
        productRepositoryImpl = new ProductRepositoryImpl();
        billRepositoryImpl = new BillRepositoryImpl();
        listProduct = productRepositoryImpl.findAll();
        for (Product product : listProduct) {
            menuComboBox.addItem(product.getTenSP());
        }
    }

    public void clearDetail() {
        nameClientField.setText("");
        phoneField.setText("");
        emailClientField.setText("");
        DefaultTableModel model = (DefaultTableModel) productChosenTable.getModel();
        model.setRowCount(0);
        sumOfProductField.setText("");
        totalField.setText("");
        productQuantityMap.clear();
    }

    private void decreaseStock() {
        DefaultTableModel model = (DefaultTableModel) productChosenTable.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            String name = model.getValueAt(i, 0).toString();
            int num = Integer.parseInt(model.getValueAt(i, 1).toString());
            Product findProduct = productRepositoryImpl.findByName(name);

            if (findProduct != null) {
                int formerNum = findProduct.getSoLuong();
                int latterNum = formerNum - num;
                findProduct.setSoLuong(latterNum);
                productRepositoryImpl.update(findProduct);
            }
        }
    }

    private boolean isPhoneNumberValid(String phoneNumber) {
        String phoneRegex = "^\\d{10}$";
        return phoneNumber.matches(phoneRegex);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        phoneField = new javax.swing.JTextField();
        nameClientField = new javax.swing.JTextField();
        emailClientField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        menuComboBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        numberSpinner = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        chooseProductBtn = new javax.swing.JButton();
        deleteProductBtn = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel9 = new javax.swing.JLabel();
        productScrollPane = new javax.swing.JScrollPane();
        productChosenTable = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        totalField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        generateBtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        sumOfProductField = new javax.swing.JTextField();

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        jLabel1.setBackground(new java.awt.Color(37, 37, 37));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Tạo hóa đơn");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1000, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
        );

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel3.setText("Email:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel2.setText("Tên khách hàng:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel4.setText("Số điện thoại:");

        menuComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuComboBoxActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel5.setText("Chọn món:");

        numberSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 1000000, 1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel6.setText("Số lượng:");

        chooseProductBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        chooseProductBtn.setText("Chọn");
        chooseProductBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseProductBtnActionPerformed(evt);
            }
        });

        deleteProductBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        deleteProductBtn.setText("Xóa");
        deleteProductBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteProductBtnActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Danh sách món đã chọn");

        productChosenTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Tên món", "Số lượng", "Giá tiền", "Tổng tiền"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        productScrollPane.setViewportView(productChosenTable);

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setText("VNĐ");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("Tổng tiền:");

        generateBtn.setBackground(new java.awt.Color(255, 255, 204));
        generateBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        generateBtn.setText("Xuất hóa đơn");
        generateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateBtnActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Tổng số lượng:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(nameClientField)
                    .addComponent(emailClientField, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(phoneField, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(104, 104, 104))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(menuComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(numberSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooseProductBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteProductBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26))
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(productScrollPane)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(totalField, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel10))
                    .addComponent(sumOfProductField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(generateBtn)
                .addGap(21, 21, 21))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 988, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nameClientField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(phoneField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(emailClientField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(menuComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseProductBtn)
                    .addComponent(deleteProductBtn)
                    .addComponent(numberSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(productScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(generateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sumOfProductField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(totalField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel8))))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void menuComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menuComboBoxActionPerformed

    private void chooseProductBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseProductBtnActionPerformed
        Object value = numberSpinner.getValue();
        int newQuantity = 0;

        if (value instanceof Integer) {
            newQuantity = (Integer) value;
        } else if (value instanceof Double) {
            newQuantity = ((Double) value).intValue();
        } else {
            JOptionPane.showMessageDialog(null, "Số lượng không hợp lệ!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (newQuantity < 0) {
            JOptionPane.showMessageDialog(null, "Số lượng không hợp lệ!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String productName = (String) menuComboBox.getSelectedItem();
        Product selectedProduct = null;

        for (Product product : listProduct) {
            if (product.getTenSP().equals(productName)) {
                selectedProduct = product;
                break;
            }
        }

        if (selectedProduct.getSoLuong() < newQuantity) {
            JOptionPane.showMessageDialog(this, "Món này đã hết, vui lòng chọn món khác");
            return;
        }

        if (selectedProduct == null) {
            JOptionPane.showMessageDialog(null, "Không tìm thấy món này.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (newQuantity == 0) {
            productQuantityMap.remove(selectedProduct);
        } else {
            productQuantityMap.put(selectedProduct, newQuantity);
        }

        updateProductChosenTable();
        updateTotal();
        }

        private void updateProductChosenTable() {
            DefaultTableModel model = (DefaultTableModel) productChosenTable.getModel();
            model.setRowCount(0);

            for (Map.Entry<Product, Integer> entry : productQuantityMap.entrySet()) {
                Product product = entry.getKey();
                int quantity = entry.getValue();
                double unitPrice = product.getGia();
                double totalPrice = unitPrice * quantity;
                model.addRow(new Object[]{product.getTenSP(), quantity, unitPrice, totalPrice});
            }
        }

        private void updateTotal() {
            int totalQuantity = 0;
            double totalMoney = 0;

            for (Map.Entry<Product, Integer> entry : productQuantityMap.entrySet()) {
                totalQuantity += entry.getValue();
                totalMoney += entry.getKey().getGia() * entry.getValue();
            }

            sumOfProductField.setText(String.valueOf(totalQuantity));
            totalField.setText(String.valueOf(totalMoney));
    }//GEN-LAST:event_chooseProductBtnActionPerformed

    private void deleteProductBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteProductBtnActionPerformed
        int selectRow = productChosenTable.getSelectedRow();
        if (selectRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn sản phẩm để xóa");
            return;
        }

        int option = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa sản phẩm này?", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (option != JOptionPane.YES_OPTION) {
            return;
        }

        String tenSP = productChosenTable.getValueAt(selectRow, 0).toString();
        Product productToDelete = null;
        for (Product p : productRepositoryImpl.findAll()) {
            if (p.getTenSP().equals(tenSP)) {
                productToDelete = p;
                break;
            }
        }

        if (productToDelete != null) {
            String num = ((DefaultTableModel) productChosenTable.getModel()).getValueAt(selectRow, 1).toString();
            int so = Integer.parseInt(num);
            int formerNum = Integer.parseInt(sumOfProductField.getText());
            int latterNum = formerNum - so;
            sumOfProductField.setText(String.valueOf(latterNum));

            ((DefaultTableModel) productChosenTable.getModel()).removeRow(selectRow);
            productQuantityMap.remove(productToDelete);

            double tongTien = 0.0;
            for (Map.Entry<Product, Integer> entry : productQuantityMap.entrySet()) {
                Product product = entry.getKey();
                int quantity = entry.getValue();
                tongTien += product.getGia() * quantity;
            }
            String sum = String.valueOf(tongTien);
            totalField.setText(sum);

            JOptionPane.showMessageDialog(this, "Đã xóa sản phẩm thành công");

        } else {
            JOptionPane.showMessageDialog(this, "Không tìm thấy sản phẩm để xóa");
        }
    }//GEN-LAST:event_deleteProductBtnActionPerformed

    private void generateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateBtnActionPerformed
        String name = nameClientField.getText().trim();
        String email = emailClientField.getText().trim();
        String phone = phoneField.getText().trim();

        if (name.isEmpty() || email.isEmpty() || phone.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Vui lòng điền đầy đủ thông tin khách hàng.", "Thiếu thông tin", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (!isPhoneNumberValid(phone)) {
            JOptionPane.showMessageDialog(this, "Số điện thoại không đúng định dạng (phải 10 số và bắt đầu bằng 0)", "CẢNH BÁO", JOptionPane.WARNING_MESSAGE);
            phoneField.setText("");
            return;
        }

        if (productQuantityMap.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn ít nhất 1 món");
            return;
        }

        double tongTien = 0.0;
        for (Map.Entry<Product, Integer> entry : productQuantityMap.entrySet()) {
            Product product = entry.getKey();
            int quantity = entry.getValue();
            tongTien += product.getGia() * quantity;
        }

        Bill bill = new Bill();
        LocalDate ngayDat = LocalDate.now();
        bill.setTen(name);
        bill.setEmail(email);
        bill.setSdt(phone);
        bill.setNgayDat(ngayDat);
        bill.setTongTien(tongTien);

        for(Map.Entry<Product,Integer> entry : productQuantityMap.entrySet()){
            bill.addItem(entry.getKey().getTenSP(), entry.getValue());
        }

        billRepositoryImpl.save(bill);

        JOptionPane.showMessageDialog(this, "Thông tin hóa đơn: \n" + bill.toString(), "Hiện hóa đơn", JOptionPane.INFORMATION_MESSAGE);
        decreaseStock();
        clearDetail();
    }//GEN-LAST:event_generateBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseProductBtn;
    private javax.swing.JButton deleteProductBtn;
    private javax.swing.JTextField emailClientField;
    private javax.swing.JButton generateBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JComboBox<String> menuComboBox;
    private javax.swing.JTextField nameClientField;
    private javax.swing.JSpinner numberSpinner;
    private javax.swing.JTextField phoneField;
    private javax.swing.JTable productChosenTable;
    private javax.swing.JScrollPane productScrollPane;
    private javax.swing.JTextField sumOfProductField;
    private javax.swing.JTextField totalField;
    // End of variables declaration//GEN-END:variables
}
